exp -> exp MULOP exp
exp -> exp ADDOP exp
exp -> INTLIT
exp -> LB exp RB


exp -> exp ADDOP exp
exp -> exp MULOP exp
exp -> INTLIT
exp -> LB exp RB


exp -> exp ADDOP term
exp -> exp MULOP term
exp -> term
term -> INTLIT
term -> LB exp RB

~ -> 
* -> greedy (string)
*? -> non-greedy (comment)
xài action block để bỏ dấu ' đóng mở string

5 thứ trong btl:

1. danh sách các (stmt SEMI), có thể rỗng:
	BNF: stmtlist -> stmt SEMI stmtlist | epsilon
	EBNF: stmtlist -> (stmt SEMI)*

2. Danh sách các (stmt SEMI), có ít nhất 1 phần tử:
	BNF: stmtlist -> (stmt SEMI) stmtlist | (stmt SEMI);
	EBNF: stmtlist -> (stmt SEMI)+;

3. Danh sách các ID cách nhau bởi COMMA, có ít nhất 1 phần tử:
	BNF: idlist -> ID COMMA idlist | ID
	EBNF: idlist -> ID (COMMA ID)*

4. Danh sách các exp cách nhau bởi COMMA, có thể rỗng:
	BNF: explist -> expprime | epsilon
	     expprime -> exp COMMA expprime | exp
	EBNF: explist -> (exp(COMMA exp)*)?

5. 

trong lập trình hướng thủ tục, có 3 nhóm chính:
	1. nhóm khai báo (declaration) (nằm trong 1-4)
	2. nhóm phát biểu (statement) (nằm trong 1-4)
	3. nhóm các biểu thức toán học (expression) (nằm trong 5)
		- xác định có bao nhiêu toán tử
		- xác định độ ưu tiên
			RELOP = ADDOP > EXPONENT > ASSIGN
		- xác định tính kết hợp (đệ quy bên nào kết hợp bên đó)
			EXPONENT: trái
			còn lại: phải


Thứ tự đặc tả các token trong btl:
	1. keyword
	2. separator (dấu)
	3. các thứ được đặc tả bằng regex (ID)

INT_TYPE
integer hay int
đề ko nói var có thể có type nào
hòa phải declare automic typ trước
arraylit hơi mơ hồ
array ko gian n-chiều?
expr list ko thể rỗng
para ko được xài EBNF
typ của param?
có dùng () trong precedence ko, precedence của operand
data returned by another operator
block_stmt

if lồng if

unclose string: string mở ra nhưng ko đóng lại
illegal escape: sử dụng dấu \ ko nằm trong danh sách
phải để 2 thằng này trên error token

-------------------------------------------------------------------------------------
	
Arithmetic operator: -+-*/%
	
Boolean operator: ! && ||

string operator: ::

relational operator: == != < > <= >=

index operator: arrayList[1,2]

function call: ID(param1, param2)

---------------------------------------
variable declare

function declare

array decl

assign statement

if statment

for statement

while statement

do-while statement

break statement

continute statement

return statement

call statement

block statement
-----------------------------------------------------------------------

x : integer = 65;
fact: function integer (n : integer) {
	if (n == 0)
		    return 1;
		else 
            return n*fact(n-1);
}
inc: function void (out n : integer, delta : integer){
	n = n + delta;
}

main: function void (){
	delta: integer = fact(3);
	inc(x,delta);
	printInteger(x);
}	
---------------------------------------------------------------------
for (i = 1, i < 10, i + 1) {
writeInt(i);
}		